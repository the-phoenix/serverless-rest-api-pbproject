service: pennyboxapp

package:
  exclude:
    - node_modules/dynamodb-localhost/**
    - node_modules/serverless-dynamodb-local/**
    - node_modules/serverless-offline/**

plugins:
  - serverless-webpack
  - serverless-mocha-plugin
  - serverless-dynamodb-local
  - serverless-offline            # This order is important. should be below of dynamodb-local
  # - serverless-dynamodb-autoscaling

provider:
  name: aws
  runtime: nodejs6.10
  stage: dev
# stage: prod
  region: us-east-1
  iamRoleStatements:
    - Effect: Allow
      Action:
        - "dynamodb:*"
      Resource:
        - "arn:aws:dynamodb:us-east-1:*"
# you can define service wide environment variables here
  environment:
    SERVICE_NAME: ${self:service}
    DB_PREFIX: ${self:custom.DB_PREFIX}
    COGNITO_POOL_ID: ${self:custom.COGNITO_POOL_ID}

custom:
  stage: ${opt:stage, self:provider.stage}
  DB_PREFIX: ${self:service}-${file(./config.yml):${self:custom.stage}.DB_PREFIX}
  COGNITO_POOL_ID: ${file(./config.yml):${self:custom.stage}.COGNITO_POOL_ID}
  webpackIncludeModules: true
  dynamodb:
    start:
      port: 8000
      inMemory: true
      migrate: true
      seed: true
    seed:
      domain:
        sources:
          - table: ${file(fixtures/migrations/family.yml):Properties.TableName}
            sources: [./fixtures/offline-seeds/family.json]
          - table: ${file(fixtures/migrations/family-user.yml):Properties.TableName}
            sources: [./fixtures/offline-seeds/family-user.json]
          - table: ${file(fixtures/migrations/user.yml):Properties.TableName}
            sources: [./fixtures/offline-seeds/user.json]
#  serverless-mocha-plugin:
#    preTestCommands:
#      - bash ./test/support/startOffline.sh
#    postTestCommands:
#      - bash ./test/support/stopOffline.sh
  # capacities:
  #   - table: ${self:custom.DB_PREFIX}-todos
  #     read:
  #       minimum: 5        # Minimum read capacity
  #       maximum: 1000     # Maximum read capacity
  #       usage: 0.75       # Targeted usage percentage
  #     write:
  #       minimum: 40       # Minimum write capacity
  #       maximum: 200      # Maximum write capacity
  #       usage: 0.5        # Targeted usage percentage

functions:
#  getUser:
#    handler: src/handlers/user.get
#    events:
#      - http:
#          method: GET
#          path: user/{id}
#          cors: true
#          authorizer:
#            name: authorizer
#            arn: ${file(./config.yml):${self:custom.stage}.COGNITO_POOL_ARN}
  getFamily:
    handler: src/handlers/family.get
    events:
      - http:
          method: GET
          path: family/{id}
          cors: true
          authorizer:
            name: authorizer
            arn: ${file(./config.yml):${self:custom.stage}.COGNITO_POOL_ARN}
  joinFamily:
    handler: src/handlers/family.join
    events:
      - http:
          method: POST
          path: family/join
          cors: true
          authorizer:
            name: authorizer
            arn: ${file(./config.yml):${self:custom.stage}.COGNITO_POOL_ARN}
  preSignup:
    handler: src/handlers/signup.preSignup
    events:
      - cognitoUserPool:
          pool: PennyboxAppUsers-${self:custom.stage}
          trigger: PreSignUp
          timeout: 5

          #authorizer: aws_iam

#    The following are a few example events you can configure
#    NOTE: Please make sure to change your handler code to work with those events
#    Check the event documentation for details
#    events:
#      - http:
#          path: users/create
#          method: get
#      - s3: ${env:BUCKET}
#      - schedule: rate(10 minutes)
#      - sns: greeter-topic
#      - stream: arn:aws:dynamodb:region:XXXXXX:table/foo/stream/1970-01-01T00:00:00.000
#      - alexaSkill
#      - iot:
#          sql: "SELECT * FROM 'some_topic'"
#      - cloudwatchEvent:
#          event:
#            source:
#              - "aws.ec2"
#            detail-type:
#              - "EC2 Instance State-change Notification"
#            detail:
#              state:
#                - pending
#      - cloudwatchLog: '/aws/lambda/hello'
#      - cognitoUserPool:
#          pool: MyUserPool
#          trigger: PreSignUp

#    Define function environment variables here
#    environment:
#      variable2: value2

# you can add CloudFormation resource templates here
#resources:
#  Resources:
#    NewResource:
#      Type: AWS::S3::Bucket
#      Properties:
#        BucketName: my-new-bucket
#  Outputs:
#     NewOutput:
#       Description: "Description for the output"
#       Value: "Some output value"
resources:
  Resources:
    familyTable: ${file(fixtures/migrations/family.yml)}
    familyUserTable: ${file(fixtures/migrations/family-user.yml)}
    userTable: ${file(fixtures/migrations/user.yml)}
